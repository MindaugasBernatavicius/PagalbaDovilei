
1. Encapsulation:
    - duomenys ir metodai klasėje enkasuliuojami. Ir klasėje galime nurodyti jų pasiekiamumo lygmenį: public, etc.
    - sąsaja su getteriais ir setteriais, bei privačiais kintamaisiais.
    - Pvz kode:
    public class Person {
        private String name;
        public String getName(){ return this.name; }
        public void setName(String name){
            // = - priskyrimo operatoriau asociatyvumas yra iš dešinės į kairę
            this.name = name;
        }
    }

    public class App {
        public static void main(String[] args){
            Person p2 = new Person();
            Person p1 = new Person();
            p1.setName("Mindaugas");
        }
    }

2. Inheritance:
    - keyword'ai: extends, child class, parent class ir "is-a" relationship.
    - paipildomai pridedame funkcionalumo tipui, nedublikuodami kodo.
    - kodo nedublikavimas leidžia įgyvendinti D.R.Y principą - kodas nesikartoja.
    - Pvz kode:
    public class Person {}
    public class Developer extends Person {}

3. Composition:
    - Kai klasėje (pvz: Warehouse) dalyvauja kitos klasės objektai (pvz: Items in Warehouse).
    - Gali būti, vienas objektas arba objektų kolekcija: pvz: List<Item> items.
    - Pvz kode:

    public class Warehouse {
        private List<Item> items;
    }

    public class Library {
        private List<Book> books;
    }

    public class Person {
        private Name name;
    }

    private class Name {
        private String firstName;
        private String middleName;
        private String lastName;
    }

4. Enums
    - Fiksuotas rinkinys reikšmių ar konstantų rinkinys (metų mėnesiai, savaitės dienos).
    - Pvz kode:
    public enum Gender { MALE; FEMALE; OTHER; }

5. Abstract class
    - class that has an abstract method and can not be instantiated; Skirtos tik extendinimui konkrečių klasių.
    - Jos artimesnės interface'ams nei klasėms;
    - Kas abstrakčias klases ir konkrečias klases vienija, tai, kad galime realizuot duomenis ir realius metodus abstrakčioje klasėje (bet ne interface).
    - Konkreti klasė --> Abstrakti klasė --> Interface'as.
    - Abstrakčioje klasėje, gali egzistuoti abstraktūs metodai t.y. metodai be kūno/body. Body bus aprašytas tose klasėse, kurios extendins tą abstrakčią klasę.
    - Pvz kode:
        abstract class Person {
            private String name;

            public String getName(){
                return this.name;
            }

            abstract String calculate();
        }

6. Interface
    - Deklaruoja kontraktą t.y. pasako, kokius metodus klasė, kuri implementuoja tą interface'ą turi turėti.
    - Kontraktas, kuris apibrėžia elgseną, nes savyje interfeicai turi metodų deklaracijas.
    - Pvz kode:
        package java.lang;
        public interface Comparable<T> {
            int compareTo(T var1);
        }

7. Exceptions
    - Klaidą pranešantys objektai.
    - Konkretus pavyzdys:
        - apdorojame failus, programa tikisi, jog failas: mano_failas1.txt bus direktorijoje C:/vartotojas/. Bet ten jo nėra, nes jis ištrintas.
        - tikiu atveju biblioteka ar metodas gali išmesti exception objektą, kuris reikš jog to failo neradome.
    - Kalbant abstrakčiau: exceptionai yra objektai, kurie išmetami įvykus klaidai tiek standartinių bibliotekų, tiek mūsų pačių (kaip programuotojų) indikuojant, kad programai kažkas nepavyko.
    - Kokios dalys supratimui exceptionų yra reikalingos?
        - Turime mokėti suhandlinti exceptionus - naudojame try/catch;
        - Turime mokėti juos deklaruoti (custom exceptions) - sukuriame naują klasę, kuri turi extendinti arba Throwable klasę arba Exception klasę.
        - Turime mokėti juos išmesti reikalingu metu (throw (custom) exception) - metame tada, kai aptinkame, jog kažkas negerai nutiko.
    - Exceptionai yra handlinami su try-catch blokais tam, kad programos veikimas nenutrūktų. T.y. kas atsistatytume po klaidos.
    - Finally blokas - įvyksta visais atvejais. T.y nepriklausomai ar exceptionas buvo sugautas ar nebuvo. Pvz: uždaryti InputStream() turime visada, nesvarbu ar failo duomenų nuskaitymas išmetė klaidą ar neišmetė klaidos.
    - Bendra idioma vadinasi try-catch-finally.

8. Generic types (... and generic methods)
    - Generic types suteikia galimybę parašyti kodą vieną kartą ir pritaikyti tą kodą, kad jis veiktų su įvairiais duomenų tipais.
    - Tai reiškia, jog į klasę, kuri gali talpinti daug kitos klasės kintamųjų mes galime dėti kintamuosius iš įvairių klasių, neperrašinėdami kodo konteinerinės klasės
    - Pvz: class GenericContainer<T> {}, galės savyje laikyti ir Integer ir Person ir String objektus (GenericContainer<Person> gc = new GenericContainer<>();
    - Taip pat egzistuoja lower bounded (<? super Integer>) ir upper bounded (<T extends Car>) generic'sai, pvz: GenericContainer<T extends Car> - tai į tą klasę galėsime dėti tiktai Car klasės ar vaikinių
        ... klasių objektus (tuos objektus, kurie yra Car arba "žemesnių" / "paveldinčių" klasių).

9. Collections (and Maps)
    - reprezentuoja grupę / aibę objektų. Tuoj jie panašūs į masyvus. O kuo skiriasi nuo masyvų?
        - Masyvai naudoja adresaciją pagrįsta indeksu (t.y. arr[i]), o kolekcijos naudoja metodus list.get(i);
        - Kolekcijos gali plėstis neribotai, o masyvai negali plėstis daugiau nei jų deklaruotas dydis.
        - Taip pat kolekcijos kaip ir kiekviena Java klasė, encapsuliuoja tam tikrą logiką, ne tik duomenis. Į mastyvą galime tik įdėti duomenis ir pasiimti juos.
            ... su kolekcijomis galime klausti tokių dalykų kaip list.contains(), list.sort() ir t.t.
    - Kokie svarbiausi kolekcijų tipai:
        - Interfaceai:
            - List (turi tvarką),
            - Set (unikalūs (nėra dublikatų), bet tvarka nėra garantuota),
            - Map (poros, key-value pairs - savyje laiko reikšmių poras, kaip telefono knyga).
        - Implementacijos
            - Listo implementacija dažniausiai naudojama yra ArrayList, LinkedList;
            - Set implementacija dažniausiai naudojama yra HashSet;
            - Map implementacija dažniausiai naudojama yra HashMap;
    - Kokios svarbiausios operacijos su kolekcijomis:
        - Išrykiuoti didėjimo, mažėjimo ar atsitiktine tvarka.
        - Paieška (dvi rūšys paieškos: Linijinė (Linear Search) arba Binary Search.
        - Map(), Filter(), Reduce();  reduce example: 12, 52, 56 ==> 41
    - Advanced dalykai:
        - List<List<String>> - sąrašas, kuris viduje turi daug kitų sąrašų, kurie viduje turi String tipo kintamąjį
        - Map<String, List<Student>> - vardų ir juos turinčių studentų mapas. "Mindaugas -> [{grade: 8,5}, {grade: 2,5}, {grade: 9,5}]"

10. Annotations:
    - Tai metainformacija kompiliatoriui arba runtime'ui.
    - Dažniausiai naudojamos yra @Override, @SuppressWarnings, @Deprecated, @FunctionalInterface
    - Mes taip pat galime sukurti savo anotacijas ir jomis žymėti metodus bei klases, bet tam, kad sukūrę galėtume jas panaudoti,
    ... mums reikia išmanyti Java Reflection

11. Input/ Output
    - Computer is: CPU + MEM.
    - Disk, keyboard, mouse, screen/display is I/O.
    - Because disk is I/O that means reading files is also I/O.
    - Perėjimas iš operacijų vykdymo vien atmintyje (tarkime kai dirbame su duomenimis įhardcodintais programoje) į I/O operacijas (atidarinėjame failus,
        ... web puslapius ar darome tinklo užklausas, ar gauname informaciją iš vartotojo su Scanner) yra dažnas Excepion'ų šaltinis. Dėl ko I/O ir Exceptionai
        ... yra glaudžiai susiję kaip temos.
    - Java mums duoda daug patogių mechanizmų dirbti su Failais: File, Path
    - Path t.y. kelias iki failo.
    - Skirtingi dalykai yra:
        -  try {} - tradicinis try/catch/finally
        - ir try () {} -- try with resources, resursas, kurį automatiškai turėsime uždaryti yra inicializuojamas tarp skliaustų.

12. Serialization
    - Definition: java programos objektų (Person p1) konvertavimas į baitus/bitus ir užsaugojimas faile ir/ar siuntimas tinklu į kitą Java programą.
    - Kada naudojamas: kai norime pasikeisti objektais tarp java virtualių mašinų distributed (t.y. aplikacija, kuri veikia neviename kompiuteryje) applikacijoje.
    - Arba kai norime išsaugoti mūsų aplikacijos būseną (eng: state).
    - File IO summary:
        - Turime kelis būdus su Java skaityti ir rašyti informaciją į failus:
            - Serializacija: java objketus išsaugoti faile, kad jie galėtų būti atkurti. Java įrašo, java nuskaito. Formatas yra neuniversalus, ir jis naudojamas tik java pasaulyje.
                ... failas žmogui NEsuprantamas. Naudojame ObjectInputStream / ObjectOutputStream klasę tam.
            - Saugojimas informacijos textiniais failais: žmogui įskaitomas failas. Ir kur kas universalesnis būdas rašyti ir skaityti informaciją.
                ... Kitos platformos / kalbos ir galėtų atidaryti šios failus ir apdoroti. Naudojame BufferedWriter / BufferedReader klasę tam.
            - Binary informacija (nesimokėme). - naudojami panašūs mechanizmai kaip ir su textiniais failais, bet interpretuoti binray data turime
                ... pagal to file formato specifikaciją (dokumentą aprašantį kaip tas failas veikia), pvz: docx. Arba / ir naudojame bibliotekas tam.
                ... pvz Apache POI: http://poi.apache.org/

13. Concurrency
    - Apibrėžimas: daugiagijis / paralelinis programavimas.
    - CPU threadus / gijas - stato į eilę ir ją rikiuoja pagal prioritetus. Jei turimes kelias gijas procese/programoje tai mūsų programa gali veikti greičiau.
    - Kodėl gali veikti greičiau? Nes šiuolaikiniai CPU turi ne vieną šerdį (core) bet daug. Kadangi, kiekvienas core'as gali vykdyti dalį programos atskirai
        ... tai programa pagreitėja.
    - Kur naudingas ir kur naudojamas paralelinis programavimas.
        - 1. Įsivaiduokime situaciją: turime 152 excel failus, su vartotojų duomenimis. Mums reikia juos perskaityti į programą ir suskaičiuoti sumas,
            ... kiek žmonėmis buvo sumokėta atlyginimais. Jei turėtume tik vieną treadą, tai visos operacijos vyktų viena po kitos. O kai turime
            ... multithreaded programą, tai dauguma/kelios operacijos gali vykti paralelei. Tai reikškia, vienu metu galime apdoroti daug failų, o ne vieną.
        - 2. Dar naudojami GUI programavime, kad pagrindinis už grafinę aplinką atsakingas threadas, nebūtų užblokuotas.
        - Reziumė: multithreaded programavimas naudojamas pagreitinti, arba neužblokuoti programos veikimo.
    - Sinchronizacija tarp threadų (thread locking):
        - T.y. būdas užkirsti kelią keliems threadams / gijoms modifikuoti duomenis tuo pačiu metu.
        - Užkertame kelią race condition'ams. Lekntyniavimui tarp threadų.
        - Tam naudojame synchronized blokus. Pvz: public synchronized void takeASeat() {} - žymime visą metodą kaip sinchronizuotą.
            ... tai reiškia, jog vienu metu tik vienas threadas galės tą metodą executinti.
        - Kai metodas yra pažymėtas synchronized keywordu, tai reiškia jog tik vienas threads vienu metu veiks, o kiti threadai laukia savo eilės.
    - Gera užduotis suprasti sinchronizacijai būtų:
        - Iš 10 failų skaityti po skaičių (1-nam failui po 1-ną threadą).
        - Ir sudėti sumą į vieną failą - suma bus saugoma 11-tame faile.
    - Geriausia knyga šia tema:
        ... https://www.amazon.co.uk/Java-Concurrency-Practice-Brian-Goetz/dp/0321349601/ref=sr_1_1

14. Nested Classes
    - Javoje, galime turėti:
        - vieną klasę per failą
        - daug klasių tame pačiame faile (bet tik viena gali būti public)
        - galime turi klasę kitoje klasėje (inner class, nested class).
    // to create a new instane of mechanic (which is a static inner class)
    // we need to call the class Bicycle e.g.: new Bicycle.Mechanic()
    // ... we can not call an object like before: bicycle.new Wheel();
    - Kam naudojamos? Prasmė turėti atskirą klasę nuo kitų klasių (t.y. atskirame faile) dažniausia atsiranda kai mes
        ... norime galimybės ją panaudoti su įvairiomis klasėmis. Kai viena klasė yra taip susijusi su kita, jog vienos
        ... negalime įsivaizduoti be kitos, tai galime naudoti vidines klases. Dažnas pavyzdys yra Iterator vidinė klasė,
        ... Builder (iš Builder design patterno) bei grafinis programavimas su JavaFX / Android (is EventListener patternas).

15. Lambda expressions
    - Lambda išraiškos tai tiesiog patogesnė sintaksė (kitos, trumpesnis būdas) užrašyti anyniniminės klasės implementacijai.
    - Tai reiškia pagerinamas yra programavimo stilius.
    - A lambda expression can be an implementation of an interface which consists of only one method: Geras pavyzdys yra Runnable interface'as.

16. Optionals
    - Apgaubiantis tipas (wrapper) į kurį dedame reikšmes, kai nežinome ar tos reikšmės bus initializuotos (t.y. ne-null).
    - Dažniausiai reikalingos naudojant stream API, pvz su .filter().

17. Streams
    - Reprezentuoja vieną kartą vykstančią operacijų grandinę / seką / konvejerį / srautą kurios taikomos kolekcijai (List).
    - Streamai reprezentuoja šią operacijų grandinę deklaratyviai. Deklaratyvus stilius dažniausiai yra glaustesnis, dėl to
        ... stream'ų pagalba parašytas kodas dažnai yra ženkliai trumpesnis.
    - Aš (Mindaugas) asmeniškai suprantu jas kaip srautą, kelių operacijų einančių viena po kitos.
    - Svarbiausios žinotinos operacijos yra: map(), filter(), foreach(), reduce();
    - map() - pritaiko funkciją / transformaciją kiekvienam kolekcijos nariui kuris preina per stream'ą.
        ... map, gražina tiek pat narių į kolekciją kiek priima, tačiau galimai pakeičia jų tipą (Sring --> Integer);
    - filter() - išfiltruoja pagal loginę sąlygą. Loginė sąlyga yra taikoma kiekvienam nariui atskirai, o operacijos rezultas yra galimai
        ... mažesnis narių kiekis kolekcijoje. Tipas nekeičiamas.
    - reduce() - skaičių aibę sutraukia į vieną skaičių, pagal kažkokias taisykles. Pvz: sumos funkcija yra redukuojanti, sandaugos, average.
    - ForEach() - kiekvienam nariui kolekcijoje iš kurios padarytas streamas, darome tam tikrą operaciją.


Ką svarbiausia žinoti iš Java Advanced kurso dalies:
- (1-4) OOP (Encap, Constructor, when to use objects, how to initialize them, etc.);
- (9) Collections
- (11) I/O (Input/ Output) + Exceptions
- (15) Streams API